// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Size {
  US_5
  US_6
  US_7
  US_8
  US_9
  US_10
  US_11
  US_12
  US_13
}

enum Style {
  CASUAL
  SPORTS
  ETHNIC
  FORMAL
  PARTY
  RIDING
}

enum Role {
  USER
  ADMIN
  SELLER
}

enum OrderStatus {
  PLACED
  IN_PROGRESS
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PAID
  PENDING
}

model Product {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  brand_name        String
  name              String
  original_price    Float
  discounted_price  Float
  category_name     String
  is_stock          Boolean
  rating            Float      @default(0.0)
  reviews           Int        @default(0)
  description       String
  trending          Boolean
  size              Size[]
  img               String[]
  style             Style?
  createdBy         User       @relation(fields: [createdById], references: [id])
  createdById       String
  reviewsConnection Review[]   @relation(name: "ReviewsOnProduct")
  wishList          WishList[] @relation(name: "WishListProducts")
  orders            Order[]    @relation(name: "OrderProducts")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  reviews   Review[]  @relation(name: "ReviewsByUser")
  profile   Profile?
}

model Profile {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  user            User       @relation(fields: [userId], references: [id])
  userId          String     @unique
  firstName       String
  lastName        String
  shippingAddress String
  billingAddress  String
  WishList        WishList[] @relation(name: "UserWishList")
  orders          Order[]    @relation(name: "UserOrderProducts")
}

model WishList {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], name: "UserWishList")
  profileId String  @unique
  productId String
  product   Product @relation(fields: [productId], references: [id], name: "WishListProducts")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String
  userId    String
  rating    Float
  content   String?
  reviewImg String[]
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], name: "ReviewsOnProduct")
  user      User     @relation(fields: [userId], references: [id], name: "ReviewsByUser")
}

model Order {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  product        Product       @relation(fields: [productId], references: [id], name: "OrderProducts")
  productId      String
  profileId      String        @unique
  profile        Profile       @relation(fields: [productId], references: [id], name: "UserOrderProducts")
  finalPrice     Float
  deliveryStatus OrderStatus
  payment        PaymentStatus @default(PENDING)
  createdAt      DateTime      @default(now())
}
